{
    "language": "Solidity",
    "settings": {
        "viaIR": true,
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        }
    },
    "sources": {
        "CallContractWithTax.sol": {
            "content": "pragma solidity ^0.8.17;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Simple Pools\r\n * https://simplepools.org/\r\n * DeFi made simple.\r\n */\r\ncontract CallContractWithTax {\r\n\r\n    address payable public owner;\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    function exchange(\r\n        SimplePools simplePoolsContract,\r\n        address personExecutingTheExchange,\r\n        uint256 poolId, \r\n        bool isBuyingAsset1, \r\n        uint256 sellAmount, \r\n        uint256 minReceiveAssetToBuyAmount,\r\n        IERC20 simplePoolsTokenAddress\r\n    ) external payable { \r\n        uint256 tax = 2 * (10**15);\r\n        uint256 taxForSimplePools = 10**15;\r\n        require(msg.value >= tax,\r\n           \"require transaction tax > 0.001 eth\");\r\n        payable(this).transfer(tax);\r\n\r\n        uint256 forTax = simplePoolsContract.exchangeAsset{value: tax}(\r\n                address(this),\r\n                0,\r\n                true,\r\n                tax - taxForSimplePools,\r\n                0\r\n        );\r\n        simplePoolsTokenAddress.transferFrom(address(this), owner, forTax);\r\n\r\n        simplePoolsContract.exchangeAsset{value: msg.value - tax}(\r\n                personExecutingTheExchange,\r\n                poolId,\r\n                isBuyingAsset1,\r\n                sellAmount,\r\n                minReceiveAssetToBuyAmount\r\n        );\r\n    }\r\n\r\n    function createPool(\r\n        SimplePools simplePoolsContract,\r\n        address poolCreatorAddress,\r\n        bool isAsset1Native,\r\n        IERC20 asset1,\r\n        bool isAsset2Native,\r\n        IERC20 asset2,\r\n        uint256 asset1Amount,\r\n        uint256 asset2InitiallyAskedAmount,\r\n        uint8 maxBuyAsset1PercentPerTransaction, \r\n        bool isConstantPrice\r\n    ) external payable {\r\n        uint256 tax = 10**15;\r\n        require(msg.value >= tax,\r\n           \"require transaction tax > 0.001 eth\");\r\n        owner.transfer(tax);\r\n        simplePoolsContract.createPool{value: msg.value - tax}(\r\n                poolCreatorAddress,\r\n                isAsset1Native,\r\n                asset1,\r\n                isAsset2Native,\r\n                asset2,\r\n                asset1Amount,\r\n                asset2InitiallyAskedAmount, \r\n                maxBuyAsset1PercentPerTransaction,\r\n                isConstantPrice\r\n        );\r\n    }\r\n\r\n    // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {}\r\n\r\n    // Fallback function is called when msg.data is not empty\r\n    fallback() external payable {}\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\ninterface SimplePools {\r\n    function exchangeAsset(\r\n        address personExecutingTheExchange,\r\n        uint256 poolId,\r\n        bool isBuyingAsset1,\r\n        uint256 sellAmount, \r\n        uint256 minReceiveAssetToBuyAmount\r\n    ) external payable returns (uint256);\r\n    function createPool(\r\n        address poolCreatorAddress,\r\n        bool isAsset1Native,\r\n        IERC20 asset1,\r\n        bool isAsset2Native,\r\n        IERC20 asset2,\r\n        uint256 asset1Amount,\r\n        uint256 asset2InitiallyAskedAmount,\r\n        uint8 maxBuyAsset1PercentPerTransaction, \r\n        bool isConstantPrice\r\n    ) external payable;\r\n}\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
        }
    }
}