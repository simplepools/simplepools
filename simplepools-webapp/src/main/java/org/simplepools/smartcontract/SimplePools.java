package org.simplepools.smartcontract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple15;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class SimplePools extends Contract {
    public static final String BINARY = "";

    public static final String FUNC__POOLS = "_pools";

    public static final String FUNC_CHANGECONTANTPRODUCT = "changeContantProduct";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_CHANGEPOOLMAXBUYASSET1PERCENTPERTRANSACTION = "changePoolMaxBuyAsset1PercentPerTransaction";

    public static final String FUNC_CONTRACTOWNER = "contractOwner";

    public static final String FUNC_CREATEPOOL = "createPool";

    public static final String FUNC_EXCHANGEASSET = "exchangeAsset";

    public static final String FUNC_GETALLASSETSFROMPOOL = "getAllAssetsFromPool";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETPOOL = "getPool";

    public static final String FUNC_getPools = "getPools";

    public static final String FUNC_GETPOOLSCOUNT = "getPoolsCount";

    public static final String FUNC_GETPOOLSFORTRANSACTIONSWITHINDEXESBETWEEN = "getPoolsForTransactionsWithIndexesBetween";

    public static final String FUNC_GETPOOLSFORTRANSACTIONSWITHINDEXESFROM = "getPoolsForTransactionsWithIndexesFrom";

    public static final String FUNC_GETPOOLSFROM = "getPoolsFrom";

    public static final String FUNC_GETTRANSACTIONSCOUNT = "getTransactionsCount";

    public static final String FUNC_ISPOOLLOCKED = "isPoolLocked";

    public static final String FUNC_LOCKPOOL = "lockPool";

    public static final String FUNC_SETNEWGLOBALTAX = "setNewGlobalTax";

    public static final String FUNC_SETNEWOWNER = "setNewOwner";

    @Deprecated
    protected SimplePools(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SimplePools(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SimplePools(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SimplePools(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple15<BigInteger, Boolean, String, Boolean, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, Boolean, Boolean>> _pools(BigInteger param0) {
        final Function function = new Function(FUNC__POOLS,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
              Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple15<BigInteger, Boolean, String, Boolean, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, Boolean, Boolean>>(function,
              new Callable<Tuple15<BigInteger, Boolean, String, Boolean, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, Boolean, Boolean>>() {
                  @Override
                  public Tuple15<BigInteger, Boolean, String, Boolean, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, Boolean, Boolean> call() throws Exception {
                      List<Type> results = executeCallMultipleValueReturn(function);
                      return new Tuple15<BigInteger, Boolean, String, Boolean, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger, String, Boolean, Boolean>(
                            (BigInteger) results.get(0).getValue(),
                            (Boolean) results.get(1).getValue(),
                            (String) results.get(2).getValue(),
                            (Boolean) results.get(3).getValue(),
                            (String) results.get(4).getValue(),
                            (BigInteger) results.get(5).getValue(),
                            (BigInteger) results.get(6).getValue(),
                            (BigInteger) results.get(7).getValue(),
                            (BigInteger) results.get(8).getValue(),
                            (BigInteger) results.get(9).getValue(),
                            (Boolean) results.get(10).getValue(),
                            (BigInteger) results.get(11).getValue(),
                            (String) results.get(12).getValue(),
                            (Boolean) results.get(13).getValue(),
                            (Boolean) results.get(14).getValue());
                  }
              });
    }

    public RemoteFunctionCall<TransactionReceipt> changeContantProduct(BigInteger poolId, BigInteger newConstantProduct, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_CHANGECONTANTPRODUCT,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId),
                    new org.web3j.abi.datatypes.generated.Uint256(newConstantProduct)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> changeOwner(BigInteger poolId, String newPoolOwner, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_CHANGEOWNER,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId),
                    new org.web3j.abi.datatypes.Address(160, newPoolOwner)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> changePoolMaxBuyAsset1PercentPerTransaction(BigInteger poolId, BigInteger newMaxBuyAsset1PercentPerTransaction, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_CHANGEPOOLMAXBUYASSET1PERCENTPERTRANSACTION,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId),
                    new org.web3j.abi.datatypes.generated.Uint8(newMaxBuyAsset1PercentPerTransaction)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> contractOwner() {
        final Function function = new Function(FUNC_CONTRACTOWNER,
              Arrays.<Type>asList(),
              Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createPool(String poolCreatorAddress, Boolean isAsset1Native, String asset1, Boolean isAsset2Native, String asset2, BigInteger asset1Amount, BigInteger asset2InitiallyAskedAmount, BigInteger maxBuyAsset1PercentPerTransaction, Boolean isConstantPrice, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_CREATEPOOL,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, poolCreatorAddress),
                    new org.web3j.abi.datatypes.Bool(isAsset1Native),
                    new org.web3j.abi.datatypes.Address(160, asset1),
                    new org.web3j.abi.datatypes.Bool(isAsset2Native),
                    new org.web3j.abi.datatypes.Address(160, asset2),
                    new org.web3j.abi.datatypes.generated.Uint256(asset1Amount),
                    new org.web3j.abi.datatypes.generated.Uint256(asset2InitiallyAskedAmount),
                    new org.web3j.abi.datatypes.generated.Uint8(maxBuyAsset1PercentPerTransaction),
                    new org.web3j.abi.datatypes.Bool(isConstantPrice)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> exchangeAsset(String personExecutingTheExchange, BigInteger poolId, Boolean isBuyingAsset1, BigInteger sellAmount, BigInteger minReceiveAssetToBuyAmount, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_EXCHANGEASSET,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, personExecutingTheExchange),
                    new org.web3j.abi.datatypes.generated.Uint64(poolId),
                    new org.web3j.abi.datatypes.Bool(isBuyingAsset1),
                    new org.web3j.abi.datatypes.generated.Uint256(sellAmount),
                    new org.web3j.abi.datatypes.generated.Uint256(minReceiveAssetToBuyAmount)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllAssetsFromPool(BigInteger poolId, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_GETALLASSETSFROMPOOL,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE,
              Arrays.<Type>asList(),
              Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Pool> getPool(BigInteger poolId) {
        final Function function = new Function(FUNC_GETPOOL,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId)),
              Arrays.<TypeReference<?>>asList(new TypeReference<Pool>() {}));
        return executeRemoteCallSingleValueReturn(function, Pool.class);
    }

    public RemoteFunctionCall<List> getPools(List<BigInteger> indexes) {
        final Function function = new Function(FUNC_getPools,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint64>(
                    org.web3j.abi.datatypes.generated.Uint64.class,
                    org.web3j.abi.Utils.typeMap(indexes, org.web3j.abi.datatypes.generated.Uint64.class))),
              Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Pool>>() {}));
        return new RemoteFunctionCall<List>(function,
              new Callable<List>() {
                  @Override
                  @SuppressWarnings("unchecked")
                  public List call() throws Exception {
                      List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                      return convertToNative(result);
                  }
              });
    }

    public RemoteFunctionCall<List> getPools(BigInteger startPoolIndex, BigInteger endPoolIndex) {
        final Function function = new Function(FUNC_getPools,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(startPoolIndex),
                    new org.web3j.abi.datatypes.generated.Uint64(endPoolIndex)),
              Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Pool>>() {}));
        return new RemoteFunctionCall<List>(function,
              new Callable<List>() {
                  @Override
                  @SuppressWarnings("unchecked")
                  public List call() throws Exception {
                      List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                      return convertToNative(result);
                  }
              });
    }

    public RemoteFunctionCall<BigInteger> getPoolsCount() {
        final Function function = new Function(FUNC_GETPOOLSCOUNT,
              Arrays.<Type>asList(),
              Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getPoolsForTransactionsWithIndexesBetween(BigInteger startTransactionIndex, BigInteger endTransactionIndex) {
        final Function function = new Function(FUNC_GETPOOLSFORTRANSACTIONSWITHINDEXESBETWEEN,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(startTransactionIndex),
                    new org.web3j.abi.datatypes.generated.Uint64(endTransactionIndex)),
              Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteFunctionCall<List>(function,
              new Callable<List>() {
                  @Override
                  @SuppressWarnings("unchecked")
                  public List call() throws Exception {
                      List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                      return convertToNative(result);
                  }
              });
    }

    public RemoteFunctionCall<List> getPoolsForTransactionsWithIndexesFrom(BigInteger startTransactionIndex) {
        final Function function = new Function(FUNC_GETPOOLSFORTRANSACTIONSWITHINDEXESFROM,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(startTransactionIndex)),
              Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteFunctionCall<List>(function,
              new Callable<List>() {
                  @Override
                  @SuppressWarnings("unchecked")
                  public List call() throws Exception {
                      List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                      return convertToNative(result);
                  }
              });
    }

    public RemoteFunctionCall<List> getPoolsFrom(BigInteger startPoolIndex) {
        final Function function = new Function(FUNC_GETPOOLSFROM,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(startPoolIndex)),
              Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Pool>>() {}));
        return new RemoteFunctionCall<List>(function,
              new Callable<List>() {
                  @Override
                  @SuppressWarnings("unchecked")
                  public List call() throws Exception {
                      List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                      return convertToNative(result);
                  }
              });
    }

    public RemoteFunctionCall<BigInteger> getTransactionsCount() {
        final Function function = new Function(FUNC_GETTRANSACTIONSCOUNT,
              Arrays.<Type>asList(),
              Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isPoolLocked(BigInteger poolId) {
        final Function function = new Function(FUNC_ISPOOLLOCKED,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId)),
              Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lockPool(BigInteger poolId, BigInteger weiValue) {
        final Function function = new Function(
              FUNC_LOCKPOOL,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(poolId)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> setNewGlobalTax(BigInteger newTaxIndexFromValidContractTransactionTaxes) {
        final Function function = new Function(
              FUNC_SETNEWGLOBALTAX,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(newTaxIndexFromValidContractTransactionTaxes)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNewOwner(String newOwner) {
        final Function function = new Function(
              FUNC_SETNEWOWNER,
              Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
              Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SimplePools load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SimplePools(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SimplePools load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SimplePools(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SimplePools load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SimplePools(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SimplePools load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SimplePools(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SimplePools> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SimplePools.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SimplePools> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SimplePools.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SimplePools> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SimplePools.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SimplePools> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SimplePools.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Pool extends StaticStruct {
        public BigInteger poolId;

        public Boolean isAsset1NativeBlockchainCurrency;

        public String asset1;

        public Boolean isAsset2NativeBlockchainCurrency;

        public String asset2;

        public BigInteger asset1Amount;

        public BigInteger asset2Amount;

        public BigInteger asset2InitiallyAskedAmount;

        public BigInteger maxBuyAsset1PercentPerTransaction;

        public BigInteger constantProduct;

        public Boolean isConstantPrice;

        public BigInteger initialAsset1Amount;

        public String poolOwner;

        public Boolean isLocked;

        public Boolean isEmpty;

        public Pool(BigInteger poolId, Boolean isAsset1NativeBlockchainCurrency, String asset1, Boolean isAsset2NativeBlockchainCurrency, String asset2, BigInteger asset1Amount, BigInteger asset2Amount, BigInteger asset2InitiallyAskedAmount, BigInteger maxBuyAsset1PercentPerTransaction, BigInteger constantProduct, Boolean isConstantPrice, BigInteger initialAsset1Amount, String poolOwner, Boolean isLocked, Boolean isEmpty) {
            super(new org.web3j.abi.datatypes.generated.Uint64(poolId),
                  new org.web3j.abi.datatypes.Bool(isAsset1NativeBlockchainCurrency),
                  new org.web3j.abi.datatypes.Address(160, asset1),
                  new org.web3j.abi.datatypes.Bool(isAsset2NativeBlockchainCurrency),
                  new org.web3j.abi.datatypes.Address(160, asset2),
                  new org.web3j.abi.datatypes.generated.Uint256(asset1Amount),
                  new org.web3j.abi.datatypes.generated.Uint256(asset2Amount),
                  new org.web3j.abi.datatypes.generated.Uint256(asset2InitiallyAskedAmount),
                  new org.web3j.abi.datatypes.generated.Uint8(maxBuyAsset1PercentPerTransaction),
                  new org.web3j.abi.datatypes.generated.Uint256(constantProduct),
                  new org.web3j.abi.datatypes.Bool(isConstantPrice),
                  new org.web3j.abi.datatypes.generated.Uint256(initialAsset1Amount),
                  new org.web3j.abi.datatypes.Address(160, poolOwner),
                  new org.web3j.abi.datatypes.Bool(isLocked),
                  new org.web3j.abi.datatypes.Bool(isEmpty));
            this.poolId = poolId;
            this.isAsset1NativeBlockchainCurrency = isAsset1NativeBlockchainCurrency;
            this.asset1 = asset1;
            this.isAsset2NativeBlockchainCurrency = isAsset2NativeBlockchainCurrency;
            this.asset2 = asset2;
            this.asset1Amount = asset1Amount;
            this.asset2Amount = asset2Amount;
            this.asset2InitiallyAskedAmount = asset2InitiallyAskedAmount;
            this.maxBuyAsset1PercentPerTransaction = maxBuyAsset1PercentPerTransaction;
            this.constantProduct = constantProduct;
            this.isConstantPrice = isConstantPrice;
            this.initialAsset1Amount = initialAsset1Amount;
            this.poolOwner = poolOwner;
            this.isLocked = isLocked;
            this.isEmpty = isEmpty;
        }

        public Pool(Uint64 poolId, Bool isAsset1NativeBlockchainCurrency, Address asset1, Bool isAsset2NativeBlockchainCurrency, Address asset2, Uint256 asset1Amount, Uint256 asset2Amount, Uint256 asset2InitiallyAskedAmount, Uint8 maxBuyAsset1PercentPerTransaction, Uint256 constantProduct, Bool isConstantPrice, Uint256 initialAsset1Amount, Address poolOwner, Bool isLocked, Bool isEmpty) {
            super(poolId, isAsset1NativeBlockchainCurrency, asset1, isAsset2NativeBlockchainCurrency, asset2, asset1Amount, asset2Amount, asset2InitiallyAskedAmount, maxBuyAsset1PercentPerTransaction, constantProduct, isConstantPrice, initialAsset1Amount, poolOwner, isLocked, isEmpty);
            this.poolId = poolId.getValue();
            this.isAsset1NativeBlockchainCurrency = isAsset1NativeBlockchainCurrency.getValue();
            this.asset1 = asset1.getValue();
            this.isAsset2NativeBlockchainCurrency = isAsset2NativeBlockchainCurrency.getValue();
            this.asset2 = asset2.getValue();
            this.asset1Amount = asset1Amount.getValue();
            this.asset2Amount = asset2Amount.getValue();
            this.asset2InitiallyAskedAmount = asset2InitiallyAskedAmount.getValue();
            this.maxBuyAsset1PercentPerTransaction = maxBuyAsset1PercentPerTransaction.getValue();
            this.constantProduct = constantProduct.getValue();
            this.isConstantPrice = isConstantPrice.getValue();
            this.initialAsset1Amount = initialAsset1Amount.getValue();
            this.poolOwner = poolOwner.getValue();
            this.isLocked = isLocked.getValue();
            this.isEmpty = isEmpty.getValue();
        }
    }
}
